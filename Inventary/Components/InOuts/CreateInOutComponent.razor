@using Entities
@using Business

<div class="form-group">
	<select class="form-control" @onchange="OnChangedWarehouse">
		<option value="">Seleccione una bodega...</option>
		@foreach (var warehouse in warehouses)
		{
			<option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
		}
	</select>
</div>

<hr />

<EditForm Model="oInOut">
	<div class="form-group">
		<InputSelect class="form-control" @bind-Value="oInOut.StorageId">
			<option value="">Seleccione una producto...</option>
			@foreach (var storage in storages)
			{
				<option value="@storage.StorageId">@storage.Product.ProductName</option>
			}
		</InputSelect>
	</div>
	<div class="form-group">
		<label>Escribe la cantidad</label>
		<InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
	</div>
	<div class="form-group">
		<label>¿Es una entrada?</label>
		<InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
	</div>

	<input class="form-control" type="button" value="@buttonValue" @onclick="SaveInOut" />
</EditForm>

<div class="text-center h4">
	@message
</div>

@code {
	InputOutputEntity oInOut = new InputOutputEntity();

	List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
	List<StorageEntity> storages = new List<StorageEntity>();

	ProductEntity oProduct = new ProductEntity();
	StorageEntity oStorage = new StorageEntity();

	string message;

	string buttonValue => oInOut.IsInput ? "Registrar entrada" : "Registrar salida";

	protected override async Task OnInitializedAsync()
	{
		warehouses = B_Warehouse.WarehouseList();
	}

	private void OnChangedWarehouse(ChangeEventArgs e)
	{
		var idWarehouse = e.Value.ToString();

		storages = B_Storage.StorageProductsByWarehouse(idWarehouse);
	}

	private void SaveInOut()
	{
		oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
		oProduct = oStorage.Product;

		if (oInOut.IsInput)
		{
			oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
			B_Storage.UpdateStorage(oStorage);

			oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
			B_Product.UpdateProduct(oProduct);

			message = $"El producto {oProduct.ProductName} ha sido actualizado";
		}
		else
		{
			if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
			{
				oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
				B_Storage.UpdateStorage(oStorage);

				oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
				B_Product.UpdateProduct(oProduct);

				message = $"El producto {oProduct.ProductName} ha sido actualizado";
			}
			else
			{
				message = $"No existe la cantidad suficiente en bodega para el producto: {oProduct.ProductName}";
			}
		}
	}

	private bool IsBiggerThanZero(int quantity, int storageQuantity)
	{
		return storageQuantity > quantity;
	}
}


